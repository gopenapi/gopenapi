openapi: 3.0.1
info:
  title: Swagger Petstore
  description: 'This is a sample server Petstore server.  You can find out more about     Swagger
    at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For
    this sample, you can use the api key "special-key" to test the authorization     filters.'
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
- url: https://petstore.swagger.io/v2
- url: http://petstore.swagger.io/v2
tags:
- name: pet
  description: Everything about your Pets
  externalDocs:
    description: Find out more
    url: http://swagger.io
- name: store
  description: Access to Petstore orders
- name: user
  description: Operations about user
  externalDocs:
    description: Find out more about our store
    url: http://swagger.io
paths:
  /pet/findByStatus:
    get:
      summary: |-
        FindPetByStatus Is Api that do Finds Pets by status
        .abc
      description: Multiple status values can be provided with comma separated strings
      responses:
        "200":
          $ref: '#/components/responses/200'
      parameters:
      - name: status
        description: Status values that need to be considered for filter
        schema:
          type: array
          items:
            type: string
            default: available
            enum:
            - available
            - pending
            - sold
        in: query
        required: true
      tags:
      - pet
      security:
      - petstore_auth:
        - write:pets
        - read:pets
  /pet/{petId}:
    get:
      summary: GetPet Find pet by ID
      description: Returns a single pet
      responses:
        "200":
          $ref: '#/components/responses/200'
      parameters:
      - in: path
        name: petId
        required: true
        schema:
          type: string
      tags:
      - pet
      operationId: getPetById
      security:
      - api_key: []
  /pet:
    post:
      summary: PutPet Update pet by ID
      description: ""
      responses:
        "200":
          description: 返回新的Pet
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
      requestBody:
        description: body
        content:
          application/json:
            schema:
              type: object
              description: Pet is pet model
              properties:
                id:
                  type: integer
                  description: Id is Pet ID
                category:
                  $ref: '#/components/schemas/Category'
                name:
                  type: string
                  description: Name is Pet name
                tags:
                  type: array
                  description: Tag is Pet Tag
                  items:
                    $ref: '#/components/schemas/Tag'
                status:
                  type: string
                  default: available
                  enum:
                  - available
                  - pending
                  - sold
                x:
                  description: test interface
                  oneOf:
                  - type: array
                  - type: boolean
                  - type: integer
                  - type: number
                  - type: object
                  - type: string
                  example: null
              required:
              - id
      tags:
      - pet
    delete:
      summary: DelPet Delete pet that need managePwd
      description: ""
      responses:
        "200":
          $ref: '#/components/responses/200'
      parameters:
      - name: id
        description: Id is Pet ID
        schema:
          type: integer
        in: query
        required: true
      - name: category
        schema:
          $ref: '#/components/schemas/Category'
        in: query
      - name: name
        description: Name is Pet name
        schema:
          type: string
        in: query
      - name: tags
        description: Tag is Pet Tag
        schema:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        in: query
      - name: status
        schema:
          type: string
          default: available
          enum:
          - available
          - pending
          - sold
        in: query
      - name: x
        description: test interface
        schema:
          oneOf:
          - type: array
          - type: boolean
          - type: integer
          - type: number
          - type: object
          - type: string
          example: null
        in: query
      - name: manage_pwd
        schema:
          type: string
        in: query
      tags:
      - pet
components:
  schemas:
    Category:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
    Tag:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
    Pet:
      type: object
      description: Pet is pet model
      properties:
        id:
          type: integer
          description: Id is Pet ID
        category:
          $ref: '#/components/schemas/Category'
        name:
          type: string
          description: Name is Pet name
        tags:
          type: array
          description: Tag is Pet Tag
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          default: available
          enum:
          - available
          - pending
          - sold
        x:
          description: test interface
          oneOf:
          - type: array
          - type: boolean
          - type: integer
          - type: number
          - type: object
          - type: string
          example: null
    TestRecursion:
      type: object
      properties:
        id:
          type: integer
        children:
          type: array
          items:
            $ref: '#/components/schemas/TestRecursion'
  responses:
    200:
      description: Success
      content:
        application/json:
          schema:
            type: string
            example: ok
    400:
      description: Invalid Params
      content:
        application/json:
          schema:
            type: object
            properties:
              msg:
                type: string
                example: 参数不正确
    401:
      description: 没权限
      content:
        application/json:
          schema:
            type: object
            properties:
              msg:
                type: string
                example: 没权限
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://petstore.swagger.io/oauth/dialog
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
